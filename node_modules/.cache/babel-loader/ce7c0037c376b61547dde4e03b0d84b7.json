{"ast":null,"code":"var _jsxFileName = \"/Users/sawadamakoto/PC/Github/chatbot-demo/src/App.jsx\";\nimport React from 'react';\nimport defaultDataset from \"./dataset\";\nimport './assets/styles/style.css';\nimport { AnswersList, Chats } from \"./components/index\";\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.displayNextQuestion = nextQuestionId => {\n      //nextQuestionIdを引数にとっておこなう\n      const chats = this.state.chats; //chatsをstateとして受け取る\n\n      chats.push({\n        //chatsに対してpushする\n        text: this.state.dataset[nextQuestionId].question,\n        //pushの内容 => 現在のstateのdatasetの中の選択されたQuestionIdのquestionを入れる\n        type: 'question'\n      });\n      this.setState({\n        //新しく配列に加えたchatsをsetStateで更新\n        answers: this.state.dataset[nextQuestionId].answers,\n        //次の質問一覧が欲しいため次のdatasetの更新を行う\n        chats: chats,\n        currentId: nextQuestionId //回答が選択されると次の質問が分かるので入れる\n\n      });\n    };\n\n    this.selectAnswer = (selectedAnswer, nextQuestionId) => {\n      switch (true) {\n        case nextQuestionId === 'init':\n          setTimeout(() => this.displayNextQuestion(nextQuestionId), 500);\n          break;\n\n        case /^https:*/.test(nextQuestionId):\n          const a = document.createElement('a');\n          a.href = nextQuestionId;\n          a.target = '_blank';\n          a.click();\n          break;\n\n        default:\n          const chats = this.state.chats; //現在の状態を変数をもたせて取得\n\n          chats.push({\n            //chatsは最初は空の配列だが、\"chat\"の連想配列をpushしてやる\n            //stateを直接書き換える様な下記の記述は再レンダリングされない為NG！！\n            // chats: this.state.chats.push(chat)\n            text: selectedAnswer,\n            type: 'answer'\n          }); //Reactでstateを置き換える時は必ずsetStateを使用して書き換える\n\n          this.setState({\n            // 選択された回答をchatsに追加してchatsを更新する\n            chats: chats\n          });\n          setTimeout(() => this.displayNextQuestion(nextQuestionId), 1500); //先程作成した関数を呼び出す引数は()内\n\n          break;\n      }\n    };\n\n    this.initAnswer = () => {\n      const initDataset = this.state.dataset[this.state.currentId];\n      const initAnswers = initDataset.answers;\n      this.setState({\n        answers: initAnswers\n      });\n    };\n\n    this.state = {\n      //初期状態のstateの管理\n      answers: [],\n      chats: [],\n      currentId: \"init\",\n      dataset: defaultDataset,\n      open: false\n    };\n    this.selectAnswer = this.selectAnswer.bind(this); //これでthis.selectAnswerがbindされたコールバック関数になる\n    //renderのたびに毎回コールバック関数を生成されるのを防ぐことで、bindを使用しパフォーマンス低下を防ぐ\n  }\n\n  componentDidMount() {\n    const initAnswer = \"\";\n    this.selectAnswer(initAnswer, this.state.currentId);\n  }\n\n  componentDidUpdate() {\n    //内容によっては()内に打ち込む=> (prevProps: Readonly<P>, prevState: Readonly<S>, snapshot: SS)\n    const scrollArea = document.getElementById('scroll-area');\n\n    if (scrollArea) {\n      scrollArea.scrollTop = scrollArea.scrollHeight;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"c-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"c-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Chats, {\n      chats: this.state.chats,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(AnswersList, {\n      answers: this.state.answers,\n      select: this.selectAnswer //select={this.selectAnswer()} <=()は無し[ついてるとrender毎にコールバック関数が走る為]}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/sawadamakoto/PC/Github/chatbot-demo/src/App.jsx"],"names":["React","defaultDataset","AnswersList","Chats","App","Component","constructor","props","displayNextQuestion","nextQuestionId","chats","state","push","text","dataset","question","type","setState","answers","currentId","selectAnswer","selectedAnswer","setTimeout","test","a","document","createElement","href","target","click","initAnswer","initDataset","initAnswers","open","bind","componentDidMount","componentDidUpdate","scrollArea","getElementById","scrollTop","scrollHeight","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport defaultDataset from \"./dataset\";\nimport './assets/styles/style.css'\nimport { AnswersList, Chats } from \"./components/index\"\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { //初期状態のstateの管理\n      answers: [],\n      chats: [],\n      currentId: \"init\",\n      dataset: defaultDataset,\n      open: false\n    }\n    this.selectAnswer = this.selectAnswer.bind(this) //これでthis.selectAnswerがbindされたコールバック関数になる\n    //renderのたびに毎回コールバック関数を生成されるのを防ぐことで、bindを使用しパフォーマンス低下を防ぐ\n  }\n\n  displayNextQuestion = (nextQuestionId) => { //nextQuestionIdを引数にとっておこなう\n    const chats = this.state.chats //chatsをstateとして受け取る\n      chats.push({ //chatsに対してpushする\n        text: this.state.dataset[nextQuestionId].question, //pushの内容 => 現在のstateのdatasetの中の選択されたQuestionIdのquestionを入れる\n        type: 'question'\n      })\n\n      this.setState({ //新しく配列に加えたchatsをsetStateで更新\n        answers: this.state.dataset[nextQuestionId].answers, //次の質問一覧が欲しいため次のdatasetの更新を行う\n        chats: chats,\n        currentId: nextQuestionId //回答が選択されると次の質問が分かるので入れる\n      })\n    }\n\n  selectAnswer = (selectedAnswer, nextQuestionId) => {\n    switch(true) {\n      case (nextQuestionId === 'init'):\n        setTimeout(() => this.displayNextQuestion(nextQuestionId), 500)\n        break;\n      case (/^https:*/.test(nextQuestionId)):\n        const a = document.createElement('a');\n        a.href = nextQuestionId;\n        a.target = '_blank';\n        a.click();\n        break;\n      default:\n        const chats = this.state.chats; //現在の状態を変数をもたせて取得\n        chats.push({ //chatsは最初は空の配列だが、\"chat\"の連想配列をpushしてやる\n        //stateを直接書き換える様な下記の記述は再レンダリングされない為NG！！\n        // chats: this.state.chats.push(chat)\n        text: selectedAnswer,\n        type: 'answer'\n        })\n    \n        //Reactでstateを置き換える時は必ずsetStateを使用して書き換える\n        this.setState({ // 選択された回答をchatsに追加してchatsを更新する\n          chats: chats\n        })\n        \n        setTimeout(() => this.displayNextQuestion(nextQuestionId), 1500) //先程作成した関数を呼び出す引数は()内\n        break;\n    }\n  }\n\n  initAnswer = () => {\n    const initDataset = this.state.dataset[this.state.currentId];\n    const initAnswers = initDataset.answers;\n\n    this.setState({\n      answers: initAnswers\n    })\n  }\n\n      componentDidMount() {\n        const initAnswer = \"\";\n        this.selectAnswer(initAnswer, this.state.currentId)\n      }\n\n      componentDidUpdate() { //内容によっては()内に打ち込む=> (prevProps: Readonly<P>, prevState: Readonly<S>, snapshot: SS)\n        const scrollArea = document.getElementById('scroll-area')\n        if(scrollArea) {\n          scrollArea.scrollTop = scrollArea.scrollHeight\n        }\n      }\n\n\n  render () {\n    return (\n      <section className=\"c-section\">\n        <div className=\"c-box\">\n          <Chats chats={this.state.chats} />\n          <AnswersList answers={this.state.answers} select={this.selectAnswer}\n           //select={this.selectAnswer()} <=()は無し[ついてるとrender毎にコールバック関数が走る為]}\n          />\n        </div>\n      </section>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}