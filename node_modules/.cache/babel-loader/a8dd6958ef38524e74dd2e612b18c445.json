{"ast":null,"code":"var _jsxFileName = \"/Users/sawadamakoto/PC/Github/chatbot-demo/src/components/Forms/FormDialog.jsx\";\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextInput from './Textinput';\nimport { WEBHOOK_URL } from '../../webhookConfig';\nexport default class FormDialog extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.inputName = event => {\n      this.setState({\n        name: event.target.value\n      });\n    };\n\n    this.inputEmail = event => {\n      this.setState({\n        email: event.target.value\n      });\n    };\n\n    this.inputDescription = event => {\n      this.setState({\n        description: event.target.value\n      });\n    };\n\n    this.validteEmailFormat = email => {\n      const regex = /^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\\.[A-Za-z0-9]{1,}$/;\n      return regex.test(email);\n    };\n\n    this.validateRequiredInput = (...args) => {\n      let isBlank = false;\n\n      for (let i = 0; i < args.length; i = i++ | 0) {\n        if (args[i] === \"\") {\n          isBlank = true;\n        }\n      }\n\n      return isBlank;\n    };\n\n    this.submitForm = () => {\n      //フォームバリデーションは未実装(textの有無、アドレスが正しいか？)\n      const name = this.state.name;\n      const email = this.state.email;\n      const description = this.state.description;\n      const isBlank = this.state.validateRequiredInput(name, email, description);\n      const isValidEmail = this.state.validteEmailFormat(email);\n\n      if (isBlank) {\n        alert('入力欄が空白です。');\n        return false;\n      } else if (!isValidEmail) {\n        alert('メールアドレスの書式に誤りがあります。');\n      } else {\n        const payload = {\n          text: '問い合わせが有りました\\n' + 'お名前：' + name + '\\n' + 'Email：' + email + '\\n' + '問い合わせ内容：\\n' + description\n        };\n        fetch(WEBHOOK_URL, {\n          method: 'POST',\n          body: JSON.stringify(payload)\n        }).then(() => {\n          alert('送信が完了しました。折返しご連絡致します。');\n          this.setState({\n            name: \"\",\n            email: \"\",\n            description: \"\"\n          });\n          return this.props.handleClose();\n        });\n      }\n    };\n\n    this.state = {\n      name: \"\",\n      email: \"\",\n      description: \"\"\n    };\n    this.inputName = this.inputName.bind(this);\n    this.inputEmail = this.inputEmail.bind(this);\n    this.inputDescription = this.inputDescription.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Dialog, {\n      open: this.props.open,\n      onClose: this.props.handleClose,\n      \"aria-labelledby\": \"alert-dialog-title\",\n      \"aria-describedby\": \"alert-dialog-description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(DialogTitle, {\n      id: \"alert-dialog-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, \"問い合わせフォーム\"), /*#__PURE__*/React.createElement(DialogContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(TextInput, {\n      label: \"お名前(必須)\",\n      multiline: false,\n      rows: 1,\n      value: this.state.name,\n      type: \"text\",\n      onChange: this.inputName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(TextInput, {\n      label: \"メールアドレス(必須)\",\n      multiline: false,\n      rows: 1,\n      value: this.state.email,\n      type: \"text\",\n      onChange: this.inputEmail,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(TextInput, {\n      label: \"お問い合わせフォーム(必須)\",\n      multiline: true,\n      rows: 5,\n      value: this.state.description,\n      type: \"text\",\n      onChange: this.inputDescription,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(DialogActions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: this.props.handleClose,\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, \"\\u30AD\\u30E3\\u30F3\\u30BB\\u30EB\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.submitForm,\n      color: \"primary\",\n      autoFocus: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }, \"\\u9001\\u4FE1\")));\n  }\n\n}","map":{"version":3,"sources":["/Users/sawadamakoto/PC/Github/chatbot-demo/src/components/Forms/FormDialog.jsx"],"names":["React","Button","Dialog","DialogActions","DialogContent","DialogTitle","TextInput","WEBHOOK_URL","FormDialog","Component","constructor","props","inputName","event","setState","name","target","value","inputEmail","email","inputDescription","description","validteEmailFormat","regex","test","validateRequiredInput","args","isBlank","i","length","submitForm","state","isValidEmail","alert","payload","text","fetch","method","body","JSON","stringify","then","handleClose","bind","render","open"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextInput from './Textinput';\nimport {WEBHOOK_URL} from '../../webhookConfig'\n\nexport default class FormDialog extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      email: \"\",\n      description: \"\"\n    }\n    this.inputName = this.inputName.bind(this)\n    this.inputEmail = this.inputEmail.bind(this)\n    this.inputDescription = this.inputDescription.bind(this)\n  }\n\n  inputName = (event) => {\n    this.setState({ name: event.target.value})\n  }\n\n  inputEmail = (event) => {\n    this.setState({ email: event.target.value})\n  }\n\n  inputDescription = (event) => {\n    this.setState({ description: event.target.value})\n  }\n\n  validteEmailFormat = (email) => {\n    const regex = /^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\\.[A-Za-z0-9]{1,}$/\n        return regex.test(email)\n  }\n\n  validateRequiredInput = (...args) => {\n    let isBlank = false;\n    for(let i = 0; i < args.length; i=(i++)|0) {\n      if(args[i] === \"\") {\n        isBlank = true;\n      }\n    }\n    return isBlank\n  };\n\n  submitForm = () => { //フォームバリデーションは未実装(textの有無、アドレスが正しいか？)\n    const name = this.state.name\n    const email = this.state.email\n    const description = this.state.description\n    const isBlank = this.state.validateRequiredInput(name, email, description)\n    const isValidEmail = this.state.validteEmailFormat(email)\n\n    if(isBlank) {\n      alert('入力欄が空白です。')\n      return false\n    } else if (!isValidEmail) {\n      alert('メールアドレスの書式に誤りがあります。')\n    } else {\n      const payload = {\n        text: '問い合わせが有りました\\n' +\n              'お名前：' + name + '\\n' +\n              'Email：' + email + '\\n' +\n              '問い合わせ内容：\\n' + description\n      };\n      \n      fetch(WEBHOOK_URL, {\n        method: 'POST',\n        body: JSON.stringify(payload)\n      }).then(() => {\n        alert('送信が完了しました。折返しご連絡致します。')\n        this.setState({\n          name: \"\",\n          email: \"\",\n          description: \"\",\n        })\n        return this.props.handleClose()\n      })\n    }\n  };\n\n  render() {\n    return(\n      <Dialog\n      open={this.props.open}\n      onClose={this.props.handleClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">{\"問い合わせフォーム\"}</DialogTitle>\n      <DialogContent>\n        <TextInput\n          label={\"お名前(必須)\"} multiline={false} rows={1}\n          value={this.state.name} type={\"text\"} onChange={this.inputName}\n        />\n        <TextInput\n          label={\"メールアドレス(必須)\"} multiline={false} rows={1}\n          value={this.state.email} type={\"text\"} onChange={this.inputEmail}\n        />\n        <TextInput\n          label={\"お問い合わせフォーム(必須)\"} multiline={true} rows={5}\n          value={this.state.description} type={\"text\"} onChange={this.inputDescription}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={this.props.handleClose} color=\"primary\">\n          キャンセル\n        </Button>\n        <Button onClick={this.submitForm} color=\"primary\" autoFocus>\n          送信\n        </Button>\n      </DialogActions>\n    </Dialog>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}